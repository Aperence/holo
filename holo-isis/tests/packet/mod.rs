//
// Copyright (c) The Holo Core Contributors
//
// SPDX-License-Identifier: MIT
//
// Sponsored by NLnet as part of the Next Generation Internet initiative.
// See: https://nlnet.nl/NGI0
//

use std::sync::LazyLock as Lazy;

use bytes::Bytes;
use const_addrs::{ip4, ip6, net4, net6};
use holo_isis::packet::auth::AuthMethod;
use holo_isis::packet::consts::LspFlags;
use holo_isis::packet::pdu::{
    Hello, HelloTlvs, HelloVariant, Lsp, LspTlvs, Pdu, Snp, SnpTlvs,
};
use holo_isis::packet::subtlvs::neighbor::{
    AdminGroupSubTlv, Ipv4InterfaceAddrSubTlv, Ipv4NeighborAddrSubTlv,
    MaxLinkBwSubTlv, MaxResvLinkBwSubTlv, TeDefaultMetricSubTlv,
    UnreservedBwSubTlv,
};
use holo_isis::packet::tlv::{
    AreaAddressesTlv, DynamicHostnameTlv, ExtIpv4Reach, ExtIpv4ReachTlv,
    ExtIsReach, ExtIsReachSubTlvs, ExtIsReachTlv, Ipv4AddressesTlv, Ipv4Reach,
    Ipv4ReachTlv, Ipv4RouterIdTlv, Ipv6AddressesTlv, Ipv6Reach, Ipv6ReachTlv,
    Ipv6RouterIdTlv, IsReach, IsReachTlv, LspBufferSizeTlv, LspEntriesTlv,
    LspEntry, NeighborsTlv, PaddingTlv, ProtocolsSupportedTlv,
};
use holo_isis::packet::{
    AreaAddr, LanId, LevelNumber, LevelType, LspId, SystemId,
};
use holo_protocol::assert_eq_hex;
use holo_utils::crypto::CryptoAlgo;
use holo_utils::keychain::Key;

//
// Helper functions.
//

fn test_encode_pdu(bytes_expected: &[u8], pdu: &Pdu, auth: &Option<&Key>) {
    let bytes_actual = pdu.clone().encode(*auth);
    assert_eq_hex!(bytes_expected, bytes_actual);
}

fn test_decode_pdu(bytes: &[u8], pdu_expected: &Pdu, auth: &Option<&Key>) {
    let bytes = Bytes::copy_from_slice(bytes);
    let auth = auth.cloned().map(AuthMethod::ManualKey);
    let mut pdu_actual =
        Pdu::decode(bytes.clone(), auth.as_ref(), auth.as_ref()).unwrap();
    if let Pdu::Lsp(pdu) = &mut pdu_actual {
        pdu.raw = bytes;
    }
    assert_eq!(*pdu_expected, pdu_actual);
}

//
// Authentication keys.
//

static KEY_CLEAR_TEXT: Lazy<Key> = Lazy::new(|| {
    Key::new(1, CryptoAlgo::ClearText, "HOLO".as_bytes().to_vec())
});
static KEY_HMAC_MD5: Lazy<Key> =
    Lazy::new(|| Key::new(1, CryptoAlgo::HmacMd5, "HOLO".as_bytes().to_vec()));

//
// Test packets.
//

static LAN_HELLO1: Lazy<(Vec<u8>, Option<&Key>, Pdu)> = Lazy::new(|| {
    (
        vec![
            0x83, 0x1b, 0x01, 0x00, 0x0f, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x09, 0x05, 0xd9, 0x40, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x02, 0x03, 0x81, 0x02, 0xcc, 0x8e, 0x01, 0x04,
            0x03, 0x49, 0x00, 0x00, 0x06, 0x0c, 0x3e, 0x25, 0x6d, 0x6d, 0x1b,
            0x25, 0x3e, 0xe8, 0x34, 0x2b, 0x1f, 0x96, 0x84, 0x04, 0x0a, 0x00,
            0x01, 0x01, 0x08, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xff, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
            0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x08, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xff, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x08, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,
        ],
        None,
        Pdu::Hello(Hello::new(
            LevelType::L1,
            LevelType::L1,
            SystemId::from([0x00, 0x00, 0x00, 0x00, 0x00, 0x01]),
            9,
            HelloVariant::Lan {
                priority: 64,
                lan_id: LanId::from([0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03]),
            },
            HelloTlvs {
                protocols_supported: Some(ProtocolsSupportedTlv {
                    list: vec![0xcc, 0x8e],
                }),
                area_addrs: vec![AreaAddressesTlv {
                    list: vec![AreaAddr::from([0x49, 0x00, 0x00].as_slice())],
                }],
                neighbors: vec![NeighborsTlv {
                    list: vec![
                        [0x3e, 0x25, 0x6d, 0x6d, 0x1b, 0x25],
                        [0x3e, 0xe8, 0x34, 0x2b, 0x1f, 0x96],
                    ],
                }],
                ipv4_addrs: vec![Ipv4AddressesTlv {
                    list: vec![ip4!("10.0.1.1")],
                }],
                ipv6_addrs: vec![],
                padding: vec![
                    PaddingTlv { length: 255 },
                    PaddingTlv { length: 255 },
                    PaddingTlv { length: 255 },
                    PaddingTlv { length: 255 },
                    PaddingTlv { length: 255 },
                    PaddingTlv { length: 153 },
                ],
                unknown: vec![],
            },
        )),
    )
});

static P2P_HELLO1: Lazy<(Vec<u8>, Option<&Key>, Pdu)> = Lazy::new(|| {
    (
        vec![
            0x83, 0x14, 0x01, 0x00, 0x11, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x06, 0x00, 0x09, 0x05, 0xd9, 0x00, 0x81, 0x02,
            0xcc, 0x8e, 0x01, 0x04, 0x03, 0x49, 0x00, 0x00, 0x84, 0x04, 0x0a,
            0x00, 0x07, 0x06, 0x08, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xff, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x08, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x08, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xff, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x08, 0xae, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,
        ],
        None,
        Pdu::Hello(Hello::new(
            LevelType::All,
            LevelType::L1,
            SystemId::from([0x00, 0x00, 0x00, 0x00, 0x00, 0x06]),
            9,
            HelloVariant::P2P {
                local_circuit_id: 0,
            },
            HelloTlvs {
                protocols_supported: Some(ProtocolsSupportedTlv {
                    list: vec![0xcc, 0x8e],
                }),
                area_addrs: vec![AreaAddressesTlv {
                    list: vec![AreaAddr::from([0x49, 0x00, 0x00].as_slice())],
                }],
                neighbors: vec![],
                ipv4_addrs: vec![Ipv4AddressesTlv {
                    list: vec![ip4!("10.0.7.6")],
                }],
                ipv6_addrs: vec![],
                padding: vec![
                    PaddingTlv { length: 255 },
                    PaddingTlv { length: 255 },
                    PaddingTlv { length: 255 },
                    PaddingTlv { length: 255 },
                    PaddingTlv { length: 255 },
                    PaddingTlv { length: 174 },
                ],
                unknown: vec![],
            },
        )),
    )
});

static P2P_HELLO2_CLEAR_TEXT: Lazy<(Vec<u8>, Option<&Key>, Pdu)> =
    Lazy::new(|| {
        (
            vec![
                0x83, 0x14, 0x01, 0x00, 0x11, 0x01, 0x00, 0x00, 0x01, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x09, 0x00, 0x2b, 0x00,
                0x0a, 0x05, 0x01, 0x48, 0x4f, 0x4c, 0x4f, 0x81, 0x02, 0xcc,
                0x8e, 0x01, 0x04, 0x03, 0x49, 0x00, 0x00, 0x84, 0x04, 0x0a,
                0x00, 0x07, 0x06,
            ],
            Some(&KEY_CLEAR_TEXT),
            Pdu::Hello(Hello::new(
                LevelType::All,
                LevelType::L1,
                SystemId::from([0x00, 0x00, 0x00, 0x00, 0x00, 0x06]),
                9,
                HelloVariant::P2P {
                    local_circuit_id: 0,
                },
                HelloTlvs {
                    protocols_supported: Some(ProtocolsSupportedTlv {
                        list: vec![0xcc, 0x8e],
                    }),
                    area_addrs: vec![AreaAddressesTlv {
                        list: vec![AreaAddr::from(
                            [0x49, 0x00, 0x00].as_slice(),
                        )],
                    }],
                    neighbors: vec![],
                    ipv4_addrs: vec![Ipv4AddressesTlv {
                        list: vec![ip4!("10.0.7.6")],
                    }],
                    ipv6_addrs: vec![],
                    padding: vec![],
                    unknown: vec![],
                },
            )),
        )
    });

static P2P_HELLO2_HMAC_MD5: Lazy<(Vec<u8>, Option<&Key>, Pdu)> =
    Lazy::new(|| {
        (
            vec![
                0x83, 0x14, 0x01, 0x00, 0x11, 0x01, 0x00, 0x00, 0x01, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x09, 0x00, 0x37, 0x00,
                0x0a, 0x11, 0x36, 0x87, 0x8a, 0x0d, 0x2c, 0x3f, 0xd5, 0x3f,
                0x4d, 0xa2, 0x1e, 0xfc, 0x8a, 0xb3, 0xe2, 0x53, 0x08, 0x81,
                0x02, 0xcc, 0x8e, 0x01, 0x04, 0x03, 0x49, 0x00, 0x00, 0x84,
                0x04, 0x0a, 0x00, 0x07, 0x06,
            ],
            Some(&KEY_HMAC_MD5),
            Pdu::Hello(Hello::new(
                LevelType::All,
                LevelType::L1,
                SystemId::from([0x00, 0x00, 0x00, 0x00, 0x00, 0x06]),
                9,
                HelloVariant::P2P {
                    local_circuit_id: 0,
                },
                HelloTlvs {
                    protocols_supported: Some(ProtocolsSupportedTlv {
                        list: vec![0xcc, 0x8e],
                    }),
                    area_addrs: vec![AreaAddressesTlv {
                        list: vec![AreaAddr::from(
                            [0x49, 0x00, 0x00].as_slice(),
                        )],
                    }],
                    neighbors: vec![],
                    ipv4_addrs: vec![Ipv4AddressesTlv {
                        list: vec![ip4!("10.0.7.6")],
                    }],
                    ipv6_addrs: vec![],
                    padding: vec![],
                    unknown: vec![],
                },
            )),
        )
    });

static CSNP1: Lazy<(Vec<u8>, Option<&Key>, Pdu)> = Lazy::new(|| {
    (
        vec![
            0x83, 0x21, 0x01, 0x00, 0x18, 0x01, 0x00, 0x00, 0x00, 0x53, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0x09, 0x30, 0x04, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x47, 0x04, 0x79, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xbc,
            0x41, 0x04, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x02, 0xc0, 0x3b,
        ],
        None,
        Pdu::Snp(Snp::new(
            LevelNumber::L1,
            LanId::from([0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00]),
            Some((
                LspId::from([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
                LspId::from([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
            )),
            SnpTlvs {
                lsp_entries: vec![LspEntriesTlv {
                    list: vec![
                        LspEntry {
                            rem_lifetime: 1145,
                            lsp_id: LspId::from([
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
                            ]),
                            cksum: 0xb847,
                            seqno: 0,
                        },
                        LspEntry {
                            rem_lifetime: 1145,
                            lsp_id: LspId::from([
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,
                            ]),
                            cksum: 0xbc41,
                            seqno: 2,
                        },
                        LspEntry {
                            rem_lifetime: 1162,
                            lsp_id: LspId::from([
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
                            ]),
                            cksum: 0xc03b,
                            seqno: 2,
                        },
                    ],
                }],
                unknown: vec![],
            },
        )),
    )
});

static PSNP1: Lazy<(Vec<u8>, Option<&Key>, Pdu)> = Lazy::new(|| {
    (
        vec![
            0x83, 0x11, 0x01, 0x00, 0x1a, 0x01, 0x00, 0x00, 0x00, 0x53, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x09, 0x40, 0x04, 0x8e, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
            0xb0, 0x53, 0x04, 0xa1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03,
            0x00, 0x00, 0x00, 0x00, 0x01, 0xd6, 0xe4, 0x04, 0x78, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xb8,
            0x47, 0x04, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x02, 0xbc, 0x41,
        ],
        None,
        Pdu::Snp(Snp::new(
            LevelNumber::L1,
            LanId::from([0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00]),
            None,
            SnpTlvs {
                lsp_entries: vec![LspEntriesTlv {
                    list: vec![
                        LspEntry {
                            rem_lifetime: 1166,
                            lsp_id: LspId::from([
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
                            ]),
                            cksum: 0xb053,
                            seqno: 2,
                        },
                        LspEntry {
                            rem_lifetime: 1185,
                            lsp_id: LspId::from([
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0x00,
                            ]),
                            cksum: 0xd6e4,
                            seqno: 1,
                        },
                        LspEntry {
                            rem_lifetime: 1144,
                            lsp_id: LspId::from([
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
                            ]),
                            cksum: 0xb847,
                            seqno: 2,
                        },
                        LspEntry {
                            rem_lifetime: 1144,
                            lsp_id: LspId::from([
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,
                            ]),
                            cksum: 0xbc41,
                            seqno: 2,
                        },
                    ],
                }],
                unknown: vec![],
            },
        )),
    )
});

static LSP1: Lazy<(Vec<u8>, Option<&Key>, Pdu)> = Lazy::new(|| {
    (
        vec![
            0x83, 0x1b, 0x01, 0x00, 0x12, 0x01, 0x00, 0x00, 0x00, 0xdf, 0x04,
            0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x04, 0x66, 0x91, 0x01, 0x81, 0x01, 0xcc, 0x01, 0x04, 0x03,
            0x49, 0x00, 0x00, 0x16, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
            0x03, 0x00, 0x00, 0x0a, 0x45, 0x03, 0x04, 0x00, 0x00, 0x00, 0x0f,
            0x06, 0x04, 0x0a, 0x00, 0x01, 0x01, 0x08, 0x04, 0x0a, 0x00, 0x01,
            0x02, 0x09, 0x04, 0x4c, 0xee, 0x6b, 0x28, 0x0a, 0x04, 0x4b, 0x3e,
            0xbc, 0x20, 0x0b, 0x20, 0x4b, 0x3e, 0xbc, 0x20, 0x4b, 0x3e, 0xbc,
            0x20, 0x4b, 0x3e, 0xbc, 0x20, 0x4b, 0x3e, 0xbc, 0x20, 0x4b, 0x3e,
            0xbc, 0x20, 0x4b, 0x3e, 0xbc, 0x20, 0x4b, 0x3e, 0xbc, 0x20, 0x4b,
            0x3e, 0xbc, 0x20, 0x12, 0x03, 0x00, 0x00, 0x64, 0x84, 0x04, 0x01,
            0x01, 0x01, 0x01, 0x87, 0x11, 0x00, 0x00, 0x00, 0x0a, 0x18, 0x0a,
            0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x20, 0x01, 0x01, 0x01, 0x01,
            0x86, 0x04, 0x01, 0x01, 0x01, 0x01, 0xe8, 0x10, 0x20, 0x01, 0x0d,
            0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x01, 0xec, 0x24, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x80, 0x20,
            0x01, 0x0d, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x40, 0x20,
            0x01, 0x0d, 0xb8, 0x10, 0x00, 0x00, 0x00, 0x8c, 0x10, 0x20, 0x01,
            0x0d, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x01,
        ],
        None,
        Pdu::Lsp(Lsp::new(
            LevelNumber::L1,
            1170,
            LspId::from([0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00]),
            0x00000004,
            LspFlags::IS_TYPE1,
            LspTlvs {
                auth: None,
                protocols_supported: Some(ProtocolsSupportedTlv {
                    list: vec![0xcc],
                }),
                area_addrs: vec![AreaAddressesTlv {
                    list: vec![AreaAddr::from([0x49, 0, 0].as_slice())],
                }],
                hostname: None,
                lsp_buf_size: None,
                is_reach: vec![],
                ext_is_reach: vec![ExtIsReachTlv {
                    list: vec![ExtIsReach {
                        neighbor: LanId::from([
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03,
                        ]),
                        metric: 10,
                        sub_tlvs: ExtIsReachSubTlvs {
                            admin_group: Some(AdminGroupSubTlv::new(0x0f)),
                            ipv4_interface_addr: vec![
                                Ipv4InterfaceAddrSubTlv::new(ip4!("10.0.1.1")),
                            ],
                            ipv4_neighbor_addr: vec![
                                Ipv4NeighborAddrSubTlv::new(ip4!("10.0.1.2")),
                            ],
                            max_link_bw: Some(MaxLinkBwSubTlv::new(
                                125000000.0,
                            )),
                            max_resv_link_bw: Some(MaxResvLinkBwSubTlv::new(
                                12500000.0,
                            )),
                            unreserved_bw: Some(UnreservedBwSubTlv::new([
                                12500000.0, 12500000.0, 12500000.0, 12500000.0,
                                12500000.0, 12500000.0, 12500000.0, 12500000.0,
                            ])),
                            te_default_metric: Some(
                                TeDefaultMetricSubTlv::new(100),
                            ),
                            unknown: vec![],
                        },
                    }],
                }],
                ipv4_addrs: vec![Ipv4AddressesTlv {
                    list: vec![ip4!("1.1.1.1")],
                }],
                ipv4_internal_reach: vec![],
                ipv4_external_reach: vec![],
                ext_ipv4_reach: vec![ExtIpv4ReachTlv {
                    list: vec![
                        ExtIpv4Reach {
                            metric: 10,
                            up_down: false,
                            prefix: net4!("10.0.1.0/24"),
                            sub_tlvs: Default::default(),
                        },
                        ExtIpv4Reach {
                            metric: 10,
                            up_down: false,
                            prefix: net4!("1.1.1.1/32"),
                            sub_tlvs: Default::default(),
                        },
                    ],
                }],
                ipv4_router_id: Some(Ipv4RouterIdTlv::new(ip4!("1.1.1.1"))),
                ipv6_addrs: vec![Ipv6AddressesTlv {
                    list: vec![ip6!("2001:db8::1")],
                }],
                ipv6_reach: vec![Ipv6ReachTlv {
                    list: vec![
                        Ipv6Reach {
                            metric: 10,
                            up_down: false,
                            external: false,
                            prefix: net6!("2001:db8::1/128"),
                            sub_tlvs: Default::default(),
                        },
                        Ipv6Reach {
                            metric: 10,
                            up_down: false,
                            external: false,
                            prefix: net6!("2001:db8:1000::0/64"),
                            sub_tlvs: Default::default(),
                        },
                    ],
                }],
                ipv6_router_id: Some(Ipv6RouterIdTlv::new(ip6!("2001:db8::1"))),
                unknown: vec![],
            },
            None,
        )),
    )
});

static LSP2: Lazy<(Vec<u8>, Option<&Key>, Pdu)> = Lazy::new(|| {
    (
        vec![
            0x83, 0x1b, 0x01, 0x00, 0x12, 0x01, 0x00, 0x00, 0x00, 0x8d, 0x04,
            0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x13, 0xb3, 0x9b, 0x01, 0x81, 0x01, 0xcc, 0x01, 0x04, 0x03,
            0x49, 0x00, 0x00, 0x89, 0x04, 0x68, 0x6f, 0x6c, 0x6f, 0x0e, 0x02,
            0x05, 0xd4, 0x02, 0x17, 0x00, 0x0a, 0x80, 0x80, 0x80, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x04, 0x00, 0x0a, 0x80, 0x80, 0x80, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x05, 0x00, 0x84, 0x04, 0x06, 0x06, 0x06, 0x06,
            0x80, 0x24, 0x0a, 0x80, 0x80, 0x80, 0x0a, 0x00, 0x07, 0x00, 0xff,
            0xff, 0xff, 0x00, 0x0a, 0x80, 0x80, 0x80, 0x0a, 0x00, 0x08, 0x00,
            0xff, 0xff, 0xff, 0x00, 0x0a, 0x80, 0x80, 0x80, 0x06, 0x06, 0x06,
            0x06, 0xff, 0xff, 0xff, 0xff, 0x82, 0x18, 0x0a, 0x80, 0x80, 0x80,
            0xac, 0x10, 0x01, 0x00, 0xff, 0xff, 0xff, 0x00, 0x4a, 0x80, 0x80,
            0x80, 0xac, 0x10, 0x02, 0x00, 0xff, 0xff, 0xff, 0x00,
        ],
        None,
        Pdu::Lsp(Lsp::new(
            LevelNumber::L1,
            1187,
            LspId::from([0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00]),
            0x00000013,
            LspFlags::IS_TYPE1,
            LspTlvs {
                auth: None,
                protocols_supported: Some(ProtocolsSupportedTlv {
                    list: vec![0xcc],
                }),
                area_addrs: vec![AreaAddressesTlv {
                    list: vec![AreaAddr::from([0x49, 0, 0].as_slice())],
                }],
                hostname: Some(DynamicHostnameTlv {
                    hostname: "holo".to_owned(),
                }),
                lsp_buf_size: Some(LspBufferSizeTlv { size: 1492 }),
                is_reach: vec![IsReachTlv {
                    list: vec![
                        IsReach {
                            metric: 10,
                            metric_delay: None,
                            metric_expense: None,
                            metric_error: None,
                            neighbor: LanId::from([
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
                            ]),
                        },
                        IsReach {
                            metric: 10,
                            metric_delay: None,
                            metric_expense: None,
                            metric_error: None,
                            neighbor: LanId::from([
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00,
                            ]),
                        },
                    ],
                }],
                ext_is_reach: vec![],
                ipv4_addrs: vec![Ipv4AddressesTlv {
                    list: vec![ip4!("6.6.6.6")],
                }],
                ipv4_internal_reach: vec![Ipv4ReachTlv {
                    list: vec![
                        Ipv4Reach {
                            up_down: false,
                            ie_bit: false,
                            metric: 10,
                            metric_delay: None,
                            metric_expense: None,
                            metric_error: None,
                            prefix: net4!("10.0.7.0/24"),
                        },
                        Ipv4Reach {
                            up_down: false,
                            ie_bit: false,
                            metric: 10,
                            metric_delay: None,
                            metric_expense: None,
                            metric_error: None,
                            prefix: net4!("10.0.8.0/24"),
                        },
                        Ipv4Reach {
                            up_down: false,
                            ie_bit: false,
                            metric: 10,
                            metric_delay: None,
                            metric_expense: None,
                            metric_error: None,
                            prefix: net4!("6.6.6.6/32"),
                        },
                    ],
                }],
                ipv4_external_reach: vec![Ipv4ReachTlv {
                    list: vec![
                        Ipv4Reach {
                            up_down: false,
                            ie_bit: false,
                            metric: 10,
                            metric_delay: None,
                            metric_expense: None,
                            metric_error: None,
                            prefix: net4!("172.16.1.0/24"),
                        },
                        Ipv4Reach {
                            up_down: false,
                            ie_bit: true,
                            metric: 10,
                            metric_delay: None,
                            metric_expense: None,
                            metric_error: None,
                            prefix: net4!("172.16.2.0/24"),
                        },
                    ],
                }],
                ext_ipv4_reach: vec![],
                ipv4_router_id: None,
                ipv6_addrs: vec![],
                ipv6_reach: vec![],
                ipv6_router_id: None,
                unknown: vec![],
            },
            None,
        )),
    )
});

static LSP3_HMAC_MD5: Lazy<(Vec<u8>, Option<&Key>, Pdu)> = Lazy::new(|| {
    (
        vec![
            0x83, 0x1b, 0x01, 0x00, 0x12, 0x01, 0x00, 0x00, 0x00, 0x5d, 0x04,
            0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x04, 0xd5, 0x41, 0x01, 0x0a, 0x11, 0x36, 0xcf, 0xab, 0x8f,
            0xed, 0xdf, 0xeb, 0xb5, 0x7e, 0xf0, 0xf7, 0x84, 0x23, 0x6f, 0xf8,
            0x37, 0x17, 0x81, 0x01, 0xcc, 0x01, 0x04, 0x03, 0x49, 0x00, 0x00,
            0x16, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00,
            0x0a, 0x00, 0x84, 0x04, 0x01, 0x01, 0x01, 0x01, 0x87, 0x11, 0x00,
            0x00, 0x00, 0x0a, 0x18, 0x0a, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a,
            0x20, 0x01, 0x01, 0x01, 0x01,
        ],
        Some(&KEY_HMAC_MD5),
        Pdu::Lsp(Lsp::new(
            LevelNumber::L1,
            1170,
            LspId::from([0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00]),
            0x00000004,
            LspFlags::IS_TYPE1,
            LspTlvs {
                auth: None,
                protocols_supported: Some(ProtocolsSupportedTlv {
                    list: vec![0xcc],
                }),
                area_addrs: vec![AreaAddressesTlv {
                    list: vec![AreaAddr::from([0x49, 0, 0].as_slice())],
                }],
                hostname: None,
                lsp_buf_size: None,
                is_reach: vec![],
                ext_is_reach: vec![ExtIsReachTlv {
                    list: vec![ExtIsReach {
                        neighbor: LanId::from([
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03,
                        ]),
                        metric: 10,
                        sub_tlvs: Default::default(),
                    }],
                }],
                ipv4_addrs: vec![Ipv4AddressesTlv {
                    list: vec![ip4!("1.1.1.1")],
                }],
                ipv4_internal_reach: vec![],
                ipv4_external_reach: vec![],
                ext_ipv4_reach: vec![ExtIpv4ReachTlv {
                    list: vec![
                        ExtIpv4Reach {
                            metric: 10,
                            up_down: false,
                            prefix: net4!("10.0.1.0/24"),
                            sub_tlvs: Default::default(),
                        },
                        ExtIpv4Reach {
                            metric: 10,
                            up_down: false,
                            prefix: net4!("1.1.1.1/32"),
                            sub_tlvs: Default::default(),
                        },
                    ],
                }],
                ipv4_router_id: None,
                ipv6_addrs: vec![],
                ipv6_reach: vec![],
                ipv6_router_id: None,
                unknown: vec![],
            },
            Some(&KEY_HMAC_MD5),
        )),
    )
});

//
// Tests.
//

#[test]
fn test_encode_lan_hello1() {
    let (ref bytes, ref auth, ref hello) = *LAN_HELLO1;
    test_encode_pdu(bytes, hello, auth);
}

#[test]
fn test_decode_lan_hello1() {
    let (ref bytes, ref auth, ref hello) = *LAN_HELLO1;
    test_decode_pdu(bytes, hello, auth);
}

#[test]
fn test_encode_p2p_hello1() {
    let (ref bytes, ref auth, ref hello) = *P2P_HELLO1;
    test_encode_pdu(bytes, hello, auth);
}

#[test]
fn test_decode_p2p_hello1() {
    let (ref bytes, ref auth, ref hello) = *P2P_HELLO1;
    test_decode_pdu(bytes, hello, auth);
}
#[test]
fn test_encode_p2p_hello2_clear_text() {
    let (ref bytes, ref auth, ref hello) = *P2P_HELLO2_CLEAR_TEXT;
    test_encode_pdu(bytes, hello, auth);
}

#[test]
fn test_decode_p2p_hello2_clear_text() {
    let (ref bytes, ref auth, ref hello) = *P2P_HELLO2_CLEAR_TEXT;
    test_decode_pdu(bytes, hello, auth);
}

#[test]
fn test_encode_p2p_hello2_hmac_md5() {
    let (ref bytes, ref auth, ref hello) = *P2P_HELLO2_HMAC_MD5;
    test_encode_pdu(bytes, hello, auth);
}

#[test]
fn test_decode_p2p_hello2_hmac_md5() {
    let (ref bytes, ref auth, ref hello) = *P2P_HELLO2_HMAC_MD5;
    test_decode_pdu(bytes, hello, auth);
}

#[test]
fn test_encode_csnp1() {
    let (ref bytes, ref auth, ref csnp) = *CSNP1;
    test_encode_pdu(bytes, csnp, auth);
}

#[test]
fn test_decode_csnp1() {
    let (ref bytes, ref auth, ref csnp) = *CSNP1;
    test_decode_pdu(bytes, csnp, auth);
}

#[test]
fn test_encode_psnp1() {
    let (ref bytes, ref auth, ref psnp) = *PSNP1;
    test_encode_pdu(bytes, psnp, auth);
}

#[test]
fn test_decode_psnp1() {
    let (ref bytes, ref auth, ref psnp) = *PSNP1;
    test_decode_pdu(bytes, psnp, auth);
}

#[test]
fn test_encode_lsp1() {
    let (ref bytes, ref auth, ref lsp) = *LSP1;
    test_encode_pdu(bytes, lsp, auth);
}

#[test]
fn test_decode_lsp1() {
    let (ref bytes, ref auth, ref lsp) = *LSP1;
    test_decode_pdu(bytes, lsp, auth);
}

#[test]
fn test_encode_lsp2() {
    let (ref bytes, ref auth, ref lsp) = *LSP2;
    test_encode_pdu(bytes, lsp, auth);
}

#[test]
fn test_decode_lsp2() {
    let (ref bytes, ref auth, ref lsp) = *LSP2;
    test_decode_pdu(bytes, lsp, auth);
}

#[test]
fn test_encode_lsp3_hmac_md5() {
    let (ref bytes, ref auth, ref lsp) = *LSP3_HMAC_MD5;
    test_encode_pdu(bytes, lsp, auth);
}

#[test]
fn test_decode_lsp3_hmac_md5() {
    let (ref bytes, ref auth, ref lsp) = *LSP3_HMAC_MD5;
    test_decode_pdu(bytes, lsp, auth);
}
